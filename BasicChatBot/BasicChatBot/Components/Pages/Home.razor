@page "/"
@rendermode InteractiveServer

<PageTitle>Sarcastic AI Chat</PageTitle>

@* Main chat container with responsive design *@
<div class="chat-container">
    @* Header section with title and clear chat functionality *@
    <div class="chat-header">
        <h2>🤖 Sarcastic AI Assistant</h2>
        @* Show clear chat button only when there are messages to clear *@
        @if (messages.Any())
        {
            <button @onclick="ClearChat" class="btn btn-light btn-sm ms-auto">
                🗑️ Clear Chat
            </button>
        }
    </div>

    @* Messages area with scrollable container *@
    <div class="chat-messages" @ref="messagesContainer">
        @* Welcome message shown when no conversation has started *@
        @if (!messages.Any())
        {
            <div class="welcome-message">
                <p>👋 Hello there! I'm your delightfully sarcastic AI assistant.</p>
                <p>Ask me anything, and I'll try to help while maintaining my charming attitude. 😏</p>
            </div>
        }

        @* Render all chat messages with proper styling based on sender *@
        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                <div class="message-avatar">
                    @if (message.IsUser)
                    {
                        <span>👤</span>
                    }
                    else
                    {
                        <span>🤖</span>
                    }
                </div>
                <div class="message-content">
                    <div class="message-text">@message.Content</div>
                    <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
                </div>
            </div>
        }

        @* Show typing indicator while AI is processing the response *@
        @if (isLoading)
        {
            <div class="message ai-message">
                <div class="message-avatar">
                    <span>🤖</span>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    @* Input area for user messages *@
    <div class="chat-input">
        <div class="input-group">
            @* Message input with real-time binding and keyboard handling *@
            <input @ref="messageInput"
                   @bind="currentMessage" 
                   @bind:event="oninput"
                   @onkeypress="HandleKeyPress" 
                   placeholder="Type your message here..." 
                   disabled="@isLoading" 
                   class="form-control" />
            @* Send button with loading state indication *@
            <button @onclick="SendMessage" 
                    disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))" 
                    class="btn btn-primary">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                }
                else
                {
                    <span>Send</span>
                }
            </button>
        </div>
    </div>
</div>
